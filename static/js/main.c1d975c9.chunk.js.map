{"version":3,"sources":["components/$widgets/form-input/AppTextField.js","components/$widgets/buttons/AppButton.js","components/todo-form/todo-form.js","components/$widgets/icons/app-icons.js","components/todo-list/todo-list.js","components/no-task/no-task.js","enum/common.enum.js","config/config.js","config/urlConfig.js","service/core/http.service.js","service/api/TodoService.js","components/todo-app/todo-app.js","index.js"],"names":["TextFieldWithStyles","withStyles","root","width","props","TextField","AppTextField","onChange","AppButtonWithStyles","Button","AppButton","TodoForm","addTodo","textRef","useRef","className","Grid","container","justify","item","md","sm","variant","size","inputRef","onKeyDown","e","key","current","value","handleTodoInput","color","onClick","DoneIcon","style","height","cursor","DeleteIcon","IncompleteIcon","TodoList","todoItems","removeTask","updateTodo","Box","mt","spacing","lg","TableContainer","component","Paper","Table","TableBody","map","todoItem","TableRow","TableCell","isDone","name","_id","NoTask","Card","CardContent","Typography","Environment","config","baseUrl","env","urls","console","log","HTTP","axios","create","baseURL","interceptors","response","use","undefined","error","message","toast","status","TodoService","getAllTodos","a","get","result","data","todo","post","deleteTodo","id","apiUrl","delete","put","TodoApp","useState","setTodoItems","useEffect","val","todoReq","info","todos","updatedTodoList","filter","forEach","ReactDOM","render","StrictMode","position","autoClose","hideProgressBar","document","getElementById"],"mappings":"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","file":"static/js/main.c1d975c9.chunk.js","sourcesContent":["import { TextField, withStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst TextFieldWithStyles = withStyles({\r\n    root: {\r\n        width: \"100%\"\r\n    },\r\n})((props) => <TextField {...props} />);\r\n\r\nfunction AppTextField(props) {\r\n    const { onChange } = props;\r\n    return <TextFieldWithStyles\r\n        {...props}\r\n        onChange={onChange}\r\n    />\r\n}\r\nexport default AppTextField;","import { Button, withStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst AppButtonWithStyles = withStyles({\r\n    root: {\r\n\r\n    }\r\n})((props) => <Button {...props}/>)\r\n\r\nconst AppButton = (props) => (\r\n    <AppButtonWithStyles \r\n    {...props}\r\n    />\r\n)\r\n\r\nexport default AppButton;","import React, { useRef } from \"react\";\r\nimport \"./todo-form.scss\";\r\nimport AppTextField from \"../$widgets/form-input/AppTextField\";\r\nimport AppButton from \"../$widgets/buttons/AppButton\";\r\nimport { Paper, Box, Grid } from \"@material-ui/core\";\r\n\r\nconst TodoForm = ({ addTodo }) => {\r\n    let textRef = useRef();\r\n\r\n    const handleTodoInput = (e) => {\r\n        if (e.key === 'Enter') {\r\n            addTodo(textRef.current.value);\r\n            textRef.current.value = '';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo-form-main\">\r\n            <div className=\"form\">\r\n                <Grid container justify=\"center\">\r\n                    <Grid item md={4} sm={10}>\r\n                        <AppTextField\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            inputRef={textRef}\r\n                            onKeyDown={(e) => handleTodoInput(e)}\r\n                        />\r\n                    </Grid>\r\n                    <AppButton\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        className=\"ml-1\"\r\n                        onClick={() => {\r\n                            addTodo(textRef.current.value);\r\n                            textRef.current.value = ''\r\n                        }}\r\n                    >Add Task</AppButton>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoForm","import CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\n\r\nconst DoneIcon = (props) => (\r\n    <CheckCircleIcon style={{\r\n        width: \"30px\",\r\n        height: \"30px\",\r\n        cursor: \"pointer\",\r\n        color: \"#1db56d\"\r\n    }}\r\n    {...props}\r\n    />\r\n)\r\n\r\nconst DeleteIcon = (props) => (\r\n    <HighlightOffIcon style={{\r\n        width: \"30px\",\r\n        height: \"30px\",\r\n        cursor: \"pointer\",\r\n        color: \"#e53737\"\r\n    }}\r\n    {...props}\r\n    />\r\n)\r\n\r\nconst IncompleteIcon = (props) => (\r\n    <CheckCircleOutlineIcon style={{\r\n        width: \"30px\",\r\n        height: \"30px\",\r\n        cursor: \"pointer\",\r\n        color: \"#1db56d\"\r\n    }}\r\n    {...props}\r\n/>\r\n)\r\n\r\nexport {\r\n    DoneIcon,\r\n    DeleteIcon,\r\n    IncompleteIcon\r\n}","import { Paper, Box, TableBody, TableContainer, TableCell, TableRow, Table, Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { DoneIcon, DeleteIcon, IncompleteIcon } from \"../$widgets/icons/app-icons\";\r\nimport \"./todo-list.scss\";\r\n\r\nconst TodoList = ({todoItems, removeTask, updateTodo}) => {\r\n    return (\r\n        <div className=\"todo-list-main\">\r\n            <Box mt={3}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item sm={12} md={6} lg={5} className=\"w-90 px-0\">\r\n                    <TableContainer component={Paper}>\r\n                        <Table>\r\n                            <TableBody>\r\n                                {\r\n                                    todoItems && todoItems.map(todoItem => (\r\n                                <TableRow>\r\n                                    <TableCell className={todoItem.isDone ? \"line-through\" : \"remove-line-through\"}>{todoItem.name}</TableCell>\r\n                                    <TableCell className=\"d-flex justify-end align-center\">\r\n                                        {\r\n                                        !todoItem.isDone ?\r\n                                        <IncompleteIcon onClick={() => updateTodo(todoItem, true)}/> :\r\n                                        <DoneIcon onClick={() => updateTodo(todoItem, false)} />\r\n                                        }\r\n                                        <DeleteIcon onClick={() => removeTask(todoItem._id)}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                    ))\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React from \"react\";\r\nimport { Paper, Box, Grid, Card, CardContent, Typography, makeStyles } from \"@material-ui/core\";\r\n\r\nconst NoTask = () => (\r\n    <Box mt={3}>\r\n        <Grid container spacing={1} justify=\"center\">\r\n            <Grid item md={6}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography component=\"p\" className=\"text-center\">No task Added!</Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    </Box>\r\n)\r\n\r\nexport default NoTask;","export const Environment = {\r\n    dev: 'development',\r\n    prod: \"production\"\r\n};\r\n","import {Environment} from \"../enum/common.enum\";\r\n\r\nexport class config {\r\n\r\n    static env = Environment.prod\r\n    \r\n}\r\n\r\n","import { Environment } from \"../enum/common.enum\";\r\nimport { config } from \"./config\";\r\n\r\nconst baseUrlDev = 'http://localhost:5000';\r\nconst baseUrlProd = 'https://evening-wave-28538.herokuapp.com';\r\n\r\nexport const baseUrl = config.env === Environment.dev ? baseUrlDev : baseUrlProd;\r\n\r\nexport const urls = {\r\n    addTodo: \"/addTodo\",\r\n    getAllTodo: \"/getAllTodos\",\r\n    updateTodo: \"/updateTodo\",\r\n    deleteTodo: \"/deleteTodo\"\r\n}\r\n\r\n","import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport {baseUrl} from '../../config/urlConfig';\r\n\r\n{console.log(\"base url \", baseUrl)};\r\nexport const HTTP = axios.create({\r\n    baseURL: baseUrl\r\n})\r\n\r\nHTTP.interceptors.response.use(undefined, (error) => {\r\n    if (error.message === 'Network Error' && !error.response) {\r\n        return toast.error('Network Error');\r\n    }\r\n    const { status } = error.response;\r\n\r\n    if (status === 404) {\r\n        return toast.error(\"404 | Not Found\");\r\n    }\r\n\r\n    if (status === 500) {\r\n        return toast.error(\"500 | Internal Server Error\");\r\n    }\r\n})","import { urls } from \"../../config/urlConfig\";\r\nimport { HTTP } from \"../core/http.service\";\r\n\r\nexport class TodoService {\r\n    \r\n    static getAllTodos = async () => {\r\n        const result = await HTTP.get(urls.getAllTodo);\r\n        if (result && result.data) {\r\n            return result.data;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    static addTodo = async (todo) => {\r\n        const result = await HTTP.post(urls.addTodo, todo);\r\n        if (result.data) {\r\n            console.log(\"result data \", result.data);\r\n            return result.data;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    static deleteTodo = async (id) => {\r\n        const apiUrl = `${urls.deleteTodo}/${id}`\r\n        const result = await HTTP.delete(apiUrl);\r\n        if (result.data) {\r\n            return result.data;\r\n        }       \r\n        return undefined;\r\n    }\r\n\r\n    static updateTodo = async (id, todo) => {\r\n        const apiUrl = `${urls.updateTodo}/${id}`;\r\n        const result = await HTTP.put(apiUrl, todo);\r\n        if (result.data) {\r\n            return result.data;\r\n        }\r\n        return undefined;\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport TodoForm from \"../todo-form/todo-form\";\r\nimport TodoList from \"../todo-list/todo-list\";\r\nimport { toast } from \"react-toastify\";\r\nimport NoTask from \"../no-task/no-task\";\r\nimport { TodoService } from \"../../service/api/TodoService\";\r\n\r\nconst TodoApp = () => {\r\n\r\n    const [todoItems, setTodoItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getAllTodos();\r\n    }, []);\r\n\r\n    const addTodo = async (val) => {\r\n        console.log(\"val \", val);\r\n        if (!val) {\r\n            toast.error(\"Task can't be empty!\");\r\n            return;\r\n        }\r\n        const todoReq = { name: val };\r\n        const todo = await TodoService.addTodo(todoReq);\r\n        if (!todo) {\r\n            return;\r\n        }\r\n        toast.info(\"Task Added Successfully!\");\r\n        setTodoItems([...todoItems, todo]);\r\n    }\r\n\r\n    const getAllTodos = async () => {\r\n        const todos = await TodoService.getAllTodos();\r\n        if (!todos) {\r\n            return;\r\n        }\r\n        setTodoItems([...todos]);\r\n    }\r\n\r\n    const removeTask = async (id) => {\r\n        const updatedTodoList = todoItems.filter(todo => todo._id !== id);\r\n        const todo = await TodoService.deleteTodo(id);\r\n        if (!todo) {\r\n            return;\r\n        }\r\n        toast.info(\"Task Deleted Successfully!\");\r\n        setTodoItems([...updatedTodoList]);\r\n    }\r\n\r\n    const updateTodo = async ({ _id, name }, status) => {\r\n        todoItems.forEach(todo => {\r\n            if (todo._id === _id) {\r\n                todo.isDone = status;\r\n            }\r\n        });\r\n        const todoReq = {\r\n            name,\r\n            isDone: status\r\n        }\r\n        const todo = await TodoService.updateTodo(_id, todoReq);\r\n        if (!todo) {\r\n            return;\r\n        }\r\n        toast.info(\"Task Status Updated Successfully!\");\r\n        setTodoItems([...todoItems]);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"todo-app-main\">\r\n            <h1 className=\"title text-center\">Todo Application</h1>\r\n            <TodoForm addTodo={addTodo} />\r\n            {\r\n                todoItems ?\r\n                    <TodoList todoItems={todoItems} removeTask={removeTask} updateTodo={updateTodo} />\r\n                    :\r\n                    <NoTask />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport TodoApp from \"./components/todo-app/todo-app\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { ToastContainer } from \"react-toastify\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoApp />\n    <ToastContainer position=\"top-right\"\n      autoClose={5000}\n      hideProgressBar={true} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}